#!/usr/bin/env bash


usage(){
  echo 'usage: filecounter [-d dirname] [-h]'
}

description(){
  d=$(cat << EOF

Outputs disk usage and name of each file nested recursively in a given
directory. If no directory is provided, uses current directory as the
starting point. Does not include hidden files or hidden directories.

Output format is usage|filename.

Example

%  filecounter -d example 
>> 64	example/filetwo.csv|filetwo.csv
>> 8	example/fileone.txt|fileone.txt


EOF
)
  echo "$d"
}


# read in arguments
# source: https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/
while getopts ":hd:" opt; do
  case ${opt} in
    d )
      directory=$OPTARG
      ;;
    h )
      usage
      description
      exit
      ;;
    ? )
      echo "unknown option: $OPTARG" 1>&2
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# Stop if no option arguments were passed
if [ $OPTIND -eq 1 ]; then
      echo "invalid option: filecounter requires an argument" 1>&2
      exit 1
fi 


# create temporary file
# source: https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script
# source: https://stackoverflow.com/questions/55435352/bad-file-descriptor-when-reading-from-fd-3-pointing-to-a-temp-file
# 2 file pointers are required because &3 is at the end of the file after the previous write
tmp_file=$(mktemp /tmp/filecounter-filelist.XXXXXX)
exec 3>"$tmp_file"   # create file pointer for writing to file
exec 4<"$tmp_file"   # create file pointer for reading from file
rm "$tmp_file"


# get disk usage for each nested file in the given directory
# use current working directory as default value if no directory was supplied
# skip hidden directories and hidden files
find "${directory:-"$PWD"}" -not -path '*/\.*' -type f -exec du -s {} + >&3


# process usage list
while read -r line; do

  # parse file size and filename
  fsize=$(echo "${line}" | cut -d' ' -f1)
  fname=$(echo "${line}" | cut -d' ' -f2-100)

  # output file size and basename
  bname=$(basename "$fname")
  echo "$fsize|$bname"

done <&4
